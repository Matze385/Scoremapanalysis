detection reward = -9*10**3
detection_penalty = 9*10**3

#rotational paramater
    x_center = 510/2
    y_center = 514/2
    n_rot = 8

    #read in parameter
    path_scoremaps = '../../Deformabel-Part-Model/ccv/samples/fly/pred/scoremap/'
    energy_gap_graphical_model = 0.02
    threshold_abs = 0.08
    threshold_abs_035 = 0.35
    max_move_per_frame = 10
    conflict_radius = 5.
    angle_weights = [0., 20., 135., 180., 180.]
    weights = [1./float(max_move_per_frame), 3./180., 7., 1., 1. ] #[trans_move, trans_angle, detection, appearance, disappearance ]
    start_idx = 2970
    n_idx = 20

    hypotheses_035 = Hypotheses()
    #hypotheses.add_frame(1, feature)
    
        
    for idx in np.arange(start_idx, start_idx + n_idx):
        stack = ScoreStack(idx, n_rot, x_center=x_center, y_center=y_center, path_scoremaps=path_scoremaps)
        hypotheses_035.add_frame(idx, stack.extract_hypotheses(threshold_abs=threshold_abs_035))
    
    hypotheses = Hypotheses()
     
    for idx in np.arange(start_idx, start_idx + n_idx):
        stack = ScoreStack(idx, n_rot, x_center=x_center, y_center=y_center, path_scoremaps=path_scoremaps)
        hypotheses.add_frame(idx, stack.extract_hypotheses(threshold_abs=threshold_abs))


    true_det_first_t_035 = [0, 3, 5, 6, 7, 8, 13, 14, 15, 16, 18, 20, 21, 24, 25, 26, 27, 29, 31]
    true_det_last_t_035 = [0, 1, 2, 3, 4, 5, 9, 10, 13, 12, 14, 18, 19, 20, 21, 22, 23, 31, 32]
    true_det_first_t = find_hypo_idx(hypotheses.frames[0][1], true_det_first_t_035, hypotheses_035.frames[0][1])
    true_det_last_t = find_hypo_idx(hypotheses.frames[-1][1], true_det_last_t_035, hypotheses_035.frames[-1][1])
    
    tracker = Tracker(hypotheses, threshold_abs, max_move_per_frame=max_move_per_frame, optimizerEpGap=energy_gap_graphical_model)
    tracker.track(true_det_first_t, true_det_last_t, weights, conflict_radius, angle_weights, print_result=False)
    tracker.print_status()
    tracker.draw_tracks('images_with_tracks/clean/', 'images_with_tracks/with_tracks/', length_arrow=15, all_tracks=True, track_start_ids=[])
    #start_id = 126
    start_ids = tracker.start_ids
    print ('start ids :', start_ids)
    tracker.object_transition_analysis(all_tracks = False, track_start_ids=start_ids, add_to_h5_file=True)


